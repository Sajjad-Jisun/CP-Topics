// Function to generate all subsets of a given vector
void solve() {
    vector<int> v = {1, 2, 3}; // Input vector
    vector<vector<int>> ans; // To store all subsets

    for (int mask = 0; mask < (1 << v.size()); mask++) {
        vector<int> subset; // Current subset
        for (int j = 0; j < v.size(); j++) {  // Check each bit of mask
            if (mask & (1 << j)) {
                subset.push_back(v[j]); // If bit is set, include v[j]
            }
        }
        ans.push_back(subset); // Add current subset to answer
    }

    // Print all subsets
    for (int i = 0; i < ans.size(); i++) {
        for (int j = 0; j < ans[i].size(); j++) {
            cout << ans[i][j] << " ";
        }
        cout << endl;
    }
}


Just the raw code -

    vector<int> v = {1, 2, 3};
    vector<vector<int>> ans;
    for (int num = 0; num <= (1LL << v.size()); num++) {
        vector<int> subset;
        for (int j = 0; j < v.size(); j++) {
            if (num & (1LL << j)) subset.push_back(v[j]);
        }
        ans.push_back(subset);
    }
