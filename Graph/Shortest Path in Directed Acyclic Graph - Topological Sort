void shortestPathInDAG(int N, vector<pair<int,int>> adj[]) {
    vector<int> topo;
    vector<int> indeg(N,0);
    
    // Calculate indegrees for Kahnâ€™s topo sort
    for(int i=0;i<N;i++)
        for(auto [v,w]: adj[i])
            indeg[v]++;
    
    queue<int> q;
    for(int i=0;i<N;i++) if(indeg[i]==0) q.push(i);
    
    while(!q.empty()){
        int u=q.front(); q.pop();
        topo.push_back(u);
        for(auto [v,w]: adj[u]){
            indeg[v]--;
            if(indeg[v]==0) q.push(v);
        }
    }

    // Initialize distances
    vector<long long> dist(N, LLONG_MAX);
    dist[0]=0; // assuming source is 0

    // Relax edges in topo order
    for(auto u: topo){
        if(dist[u]!=LLONG_MAX){
            for(auto [v,w]: adj[u]){
                if(dist[v] > dist[u] + w){
                    dist[v] = dist[u] + w;
                }
            }
        }
    }

    for(auto d: dist) cout << (d==LLONG_MAX ? -1 : d) << " ";
}
