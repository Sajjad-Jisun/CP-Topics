What is TOPOSORT?
-Topological Sort (TopoSort) is an ordering of the vertices of a Directed Acyclic Graph (DAG) such that:
ðŸ‘‰ For every directed edge u â†’ v,
vertex u appears before vertex v in the ordering.

##Using DFS-
void dfs(ll node, vector<vector<ll>>&v, vector<ll>&vis, stack<ll>&ts){
    vis[node]=1;

    for(auto child:v[node]){
        if(!vis[child])dfs(child,v,vis,ts);
    }
    ts.push(node); //ts is a stack
}

##Using BFS- (khan's Algorithm)
Find the indegrees of all node
1) insert nodes with 0 in degree - in the queue 
Run a loop for the children and decress the injdegrees of the children, and push the children if the indegree become zero
2) pop and push in a vector which will be the ts

vector<int> topologicalSort(int V, vector<vector<int> >& edges)
{
    vector<vector<int>> adj = constructadj(V,edges);
    
    vector<int> indegree(V);
    for (int i = 0; i < V; i++) {
        for (auto it : adj[i]) {
            indegree[it]++;
        }
    }

    queue<int> q;
    for (int i = 0; i < V; i++) {
        if (indegree[i] == 0) {
            q.push(i);
        }
    }
    vector<int> result;
    while (!q.empty()) {
        int node = q.front();
        q.pop();
        result.push_back(node);
        
        for (auto it : adj[node]) {
            indegree[it]--;

            if (indegree[it] == 0)
                q.push(it);
        }
    }

    if (result.size() != V) {
        cout << "Graph contains cycle!" << endl;
        return {};
    }

    return result;
}
